#!/usr/bin/env bash

# Video Concatenator CLI Tool
# A professional video concatenation script with intro slides and grid view finale
# Author: Generated with Claude
# License: MIT

set -euo pipefail

# Default values
OUTPUT_FILE="output.mp4"
MAX_SIZE_MB=10
VERBOSE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
Video Concatenator - Professional video concatenation with intro and grid finale

USAGE:
    video-concat [OPTIONS] <input_directory>

ARGUMENTS:
    <input_directory>    Directory containing video files to concatenate

OPTIONS:
    -o, --output FILE    Output filename (default: output.mp4)
    -s, --size SIZE      Maximum output size in MB (default: 10)
    -v, --verbose        Enable verbose output
    -h, --help          Show this help message

DESCRIPTION:
    This tool creates a professional video compilation with:
    • 5-second intro slide listing all scenes with durations
    • Individual video segments with filename watermarks
    • Grid view finale showing all videos simultaneously
    
    Videos are automatically sorted alphabetically and compressed to stay under
    the specified size limit while maintaining quality.

EXAMPLES:
    video-concat /path/to/videos
    video-concat -o my-compilation.mp4 -s 20 ./my-videos/
    video-concat --verbose --output final.mp4 ~/Desktop/clips/

REQUIREMENTS:
    • ffmpeg with libx264 support
    • ffprobe (usually included with ffmpeg)
    • bc (basic calculator)

EOF
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v ffmpeg &> /dev/null; then
        missing_deps+=("ffmpeg")
    fi
    
    if ! command -v ffprobe &> /dev/null; then
        missing_deps+=("ffprobe")
    fi
    
    if ! command -v bc &> /dev/null; then
        missing_deps+=("bc")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo "Please install the missing dependencies and try again."
        exit 1
    fi
}

# Function to validate input directory
validate_input_dir() {
    local input_dir="$1"
    
    if [[ ! -d "$input_dir" ]]; then
        print_error "Directory does not exist: $input_dir"
        exit 1
    fi
    
    if [[ ! -r "$input_dir" ]]; then
        print_error "Directory is not readable: $input_dir"
        exit 1
    fi
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -o|--output)
                OUTPUT_FILE="$2"
                shift 2
                ;;
            -s|--size)
                MAX_SIZE_MB="$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -*)
                print_error "Unknown option: $1"
                echo "Use -h or --help for usage information."
                exit 1
                ;;
            *)
                if [[ -z "${INPUT_DIR:-}" ]]; then
                    INPUT_DIR="$1"
                else
                    print_error "Multiple input directories specified"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [[ -z "${INPUT_DIR:-}" ]]; then
        print_error "Input directory is required"
        echo "Use -h or --help for usage information."
        exit 1
    fi
}

# Main concatenation function
concatenate_videos() {
    local input_dir="$1"
    local output_file="$2"
    local max_size="$3"
    
    print_status "Starting video concatenation from: $input_dir"
    
    # Use system tmp directory
    local TMP_DIR
    TMP_DIR=$(mktemp -d)
    
    if [[ "$VERBOSE" == "true" ]]; then
        print_status "Using temporary directory: $TMP_DIR"
    fi
    
    # Cleanup function
    cleanup() {
        if [[ "$VERBOSE" == "true" ]] && [[ -n "${TMP_DIR:-}" ]]; then
            print_status "Cleaning up temporary files..."
        fi
        if [[ -n "${TMP_DIR:-}" ]]; then
            rm -rf "$TMP_DIR"
        fi
    }
    trap cleanup EXIT
    
    # Get all video files and sort them alphabetically
    local VIDEO_FILES=()
    while IFS= read -r -d '' file; do
        # Skip the output file and any previous output files
        local filename=$(basename "$file")
        if [[ "$filename" != "$(basename "$output_file")" ]] && [[ "$filename" != "output.mp4" ]] && [[ "$filename" != "test-output.mp4" ]]; then
            VIDEO_FILES+=("$file")
        fi
    done < <(find "$input_dir" -maxdepth 1 -type f \( -name "*.mov" -o -name "*.mp4" -o -name "*.avi" -o -name "*.mkv" -o -name "*.MOV" -o -name "*.MP4" -o -name "*.AVI" -o -name "*.MKV" \) -print0 | sort -z)
    
    if [ ${#VIDEO_FILES[@]} -eq 0 ]; then
        print_error "No video files found in directory: $input_dir"
        exit 1
    fi
    
    print_success "Found ${#VIDEO_FILES[@]} video files:"
    for file in "${VIDEO_FILES[@]}"; do
        echo "  $(basename "$file")"
    done
    
    # Get video durations and calculate mean duration
    print_status "Analyzing video durations..."
    local INTRO_FILE="$TMP_DIR/intro_text.txt"
    echo "This video will show the following scenes:" > "$INTRO_FILE"
    echo "" >> "$INTRO_FILE"
    
    local SCENE_NUMBER=1
    local TOTAL_DURATION=0
    local DURATIONS=()
    
    for video_file in "${VIDEO_FILES[@]}"; do
        local filename_no_ext
        filename_no_ext="$(basename "${video_file%.*}")"
        
        # Get duration in seconds using ffprobe
        local duration
        duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$video_file" 2>/dev/null)
        
        if [[ -n "$duration" ]] && [[ "$duration" != "N/A" ]]; then
            DURATIONS+=("$duration")
            TOTAL_DURATION=$(echo "$TOTAL_DURATION + $duration" | bc -l)
            local duration_int
            duration_int=$(printf "%.0f" "$duration")
            echo "${SCENE_NUMBER}. ${filename_no_ext} (${duration_int}s)" >> "$INTRO_FILE"
        else
            echo "${SCENE_NUMBER}. ${filename_no_ext}" >> "$INTRO_FILE"
            DURATIONS+=("10")  # fallback duration
            TOTAL_DURATION=$(echo "$TOTAL_DURATION + 10" | bc -l)
        fi
        
        ((SCENE_NUMBER++))
    done
    
    # Calculate mean duration
    local MEAN_DURATION
    MEAN_DURATION=$(echo "scale=2; $TOTAL_DURATION / ${#DURATIONS[@]}" | bc -l)
    print_status "Mean duration: ${MEAN_DURATION}s"
    
    # Add grid view info to intro
    echo "" >> "$INTRO_FILE"
    echo "Final: Grid view of all scenes ($(printf "%.0f" "$MEAN_DURATION")s)" >> "$INTRO_FILE"
    
    print_status "Creating intro slide..."
    
    # Get the resolution from the first video file to match
    local RESOLUTION
    RESOLUTION=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "${VIDEO_FILES[0]}" 2>/dev/null)
    if [[ -z "$RESOLUTION" ]]; then
        RESOLUTION="1920x1080"  # fallback resolution
    fi
    
    # Create 5-second intro slide with black background and red text
    local ffmpeg_output
    if [[ "$VERBOSE" == "true" ]]; then
        ffmpeg_output=""
    else
        ffmpeg_output="-v quiet"
    fi
    
    ffmpeg $ffmpeg_output -f lavfi -i color=black:size=${RESOLUTION}:duration=5:rate=60 \
        -vf "drawtext=textfile='$INTRO_FILE':fontcolor=red:fontsize=48:x=(w-tw)/2:y=(h-th)/2:box=1:boxcolor=black@0.8:boxborderw=5" \
        -c:v libx264 \
        -preset medium \
        -crf 28 \
        -movflags +faststart \
        "$TMP_DIR/intro_slide.mp4"
    
    print_success "Intro slide created successfully"
    
    # Process each video with its own filename watermark
    local PROCESSED_FILES=("$TMP_DIR/intro_slide.mp4")
    for i in "${!VIDEO_FILES[@]}"; do
        local video_file="${VIDEO_FILES[$i]}"
        local filename_no_ext
        filename_no_ext="$(basename "${video_file%.*}")"
        local output_file_tmp="$TMP_DIR/processed_${i}.mp4"
        
        print_status "Processing '$(basename "$video_file")' with watermark '$filename_no_ext'..."
        
        ffmpeg $ffmpeg_output -i "$video_file" \
            -vf "drawtext=text='$filename_no_ext':fontcolor=red:fontsize=36:x=w-tw-15:y=h-th-15:box=1:boxcolor=black@0.6:boxborderw=3" \
            -an \
            -c:v libx264 \
            -preset medium \
            -crf 28 \
            -movflags +faststart \
            "$output_file_tmp"
        
        PROCESSED_FILES+=("$output_file_tmp")
    done
    
    # Create grid view with all videos adjusted to mean duration
    print_status "Creating grid view with mean duration adjustment..."
    
    # Determine grid layout based on number of videos
    local NUM_VIDEOS=${#VIDEO_FILES[@]}
    local GRID_COLS GRID_ROWS
    
    if [ "$NUM_VIDEOS" -eq 1 ]; then
        GRID_COLS=1; GRID_ROWS=1
    elif [ "$NUM_VIDEOS" -eq 2 ]; then
        GRID_COLS=2; GRID_ROWS=1
    elif [ "$NUM_VIDEOS" -le 4 ]; then
        GRID_COLS=2; GRID_ROWS=2
    elif [ "$NUM_VIDEOS" -le 6 ]; then
        GRID_COLS=3; GRID_ROWS=2
    elif [ "$NUM_VIDEOS" -le 9 ]; then
        GRID_COLS=3; GRID_ROWS=3
    else
        GRID_COLS=4; GRID_ROWS=4
    fi
    
    if [[ "$VERBOSE" == "true" ]]; then
        print_status "Using ${GRID_COLS}x${GRID_ROWS} grid layout for ${NUM_VIDEOS} videos"
    fi
    
    # Parse resolution and calculate grid dimensions
    local WIDTH HEIGHT
    IFS='x' read -r WIDTH HEIGHT <<< "$RESOLUTION"
    local PADDING=20
    local CELL_WIDTH=$(((WIDTH - (GRID_COLS + 1) * PADDING) / GRID_COLS))
    local CELL_HEIGHT=$(((HEIGHT - (GRID_ROWS + 1) * PADDING) / GRID_ROWS))
    
    # Ensure cell dimensions are even numbers for ffmpeg compatibility
    CELL_WIDTH=$((CELL_WIDTH & ~1))
    CELL_HEIGHT=$((CELL_HEIGHT & ~1))
    
    # Reserve space for text overlay (40 pixels at top)
    local VIDEO_HEIGHT=$((CELL_HEIGHT - 50))
    VIDEO_HEIGHT=$((VIDEO_HEIGHT & ~1))
    
    if [[ "$VERBOSE" == "true" ]]; then
        print_status "Grid layout: ${GRID_COLS}x${GRID_ROWS}, Cell size: ${CELL_WIDTH}x${CELL_HEIGHT}, Video area: ${CELL_WIDTH}x${VIDEO_HEIGHT}"
    fi
    
    # Build complex filter for grid layout
    local FILTER_COMPLEX="" INPUTS=""
    
    for i in "${!VIDEO_FILES[@]}"; do
        local video_file="${VIDEO_FILES[$i]}"
        local filename_no_ext
        filename_no_ext="$(basename "${video_file%.*}")"
        
        # Calculate speed adjustment factor
        local current_duration="${DURATIONS[$i]}"
        local speed_factor
        speed_factor=$(echo "scale=4; $current_duration / $MEAN_DURATION" | bc -l)
        
        if [[ "$VERBOSE" == "true" ]]; then
            print_status "Adjusting '$filename_no_ext' from ${current_duration}s to ${MEAN_DURATION}s (speed factor: $speed_factor)"
        fi
        
        # Add input
        INPUTS="$INPUTS -i \"$video_file\""
        
        # Build filter for this video - simplified approach
        local video_filter="[$i:v]setpts=PTS/${speed_factor},scale=${CELL_WIDTH}:${VIDEO_HEIGHT}:force_original_aspect_ratio=decrease,pad=${CELL_WIDTH}:${CELL_HEIGHT}:(ow-iw)/2:50:black,drawtext=text='${filename_no_ext}':fontcolor=red:fontsize=24:x=(w-tw)/2:y=15:box=1:boxcolor=black@0.8:boxborderw=2[v${i}]"
        
        if [ -n "$FILTER_COMPLEX" ]; then
            FILTER_COMPLEX="$FILTER_COMPLEX;"
        fi
        FILTER_COMPLEX="$FILTER_COMPLEX$video_filter"
    done
    
    # Add overlay operations for grid layout - simplified approach
    if [ "$NUM_VIDEOS" -gt 1 ]; then
        FILTER_COMPLEX="$FILTER_COMPLEX;color=black:size=${RESOLUTION}:duration=${MEAN_DURATION}:rate=60[bg]"
        
        local overlay_chain="[bg]"
        for i in $(seq 0 $((NUM_VIDEOS - 1))); do
            local row=$((i / GRID_COLS))
            local col=$((i % GRID_COLS))
            local x_pos=$((PADDING + col * (CELL_WIDTH + PADDING)))
            local y_pos=$((PADDING + row * (CELL_HEIGHT + PADDING)))
            
            if [ $i -eq $((NUM_VIDEOS - 1)) ]; then
                FILTER_COMPLEX="$FILTER_COMPLEX;${overlay_chain}[v${i}]overlay=${x_pos}:${y_pos}[grid]"
            else
                FILTER_COMPLEX="$FILTER_COMPLEX;${overlay_chain}[v${i}]overlay=${x_pos}:${y_pos}[tmp${i}]"
                overlay_chain="[tmp${i}]"
            fi
        done
    else
        FILTER_COMPLEX="$FILTER_COMPLEX[grid]"
    fi
    
    # Create grid video - avoid eval by constructing command properly
    print_status "Generating grid view..."
    
    # Write the filter complex to a file to avoid shell escaping issues
    local FILTER_FILE="$TMP_DIR/filter_complex.txt"
    echo "$FILTER_COMPLEX" > "$FILTER_FILE"
    
    # Build input arguments array
    local FFMPEG_INPUTS=()
    for video_file in "${VIDEO_FILES[@]}"; do
        FFMPEG_INPUTS+=("-i")
        FFMPEG_INPUTS+=("$video_file")
    done
    
    # Run ffmpeg with proper argument handling
    if [[ "$VERBOSE" == "true" ]]; then
        ffmpeg "${FFMPEG_INPUTS[@]}" \
            -filter_complex_script "$FILTER_FILE" \
            -map "[grid]" \
            -t "$MEAN_DURATION" \
            -an \
            -c:v libx264 \
            -preset medium \
            -crf 28 \
            -movflags +faststart \
            "$TMP_DIR/grid_view.mp4"
    else
        ffmpeg "${FFMPEG_INPUTS[@]}" \
            -filter_complex_script "$FILTER_FILE" \
            -map "[grid]" \
            -t "$MEAN_DURATION" \
            -an \
            -c:v libx264 \
            -preset medium \
            -crf 28 \
            -movflags +faststart \
            "$TMP_DIR/grid_view.mp4" \
            -v quiet
    fi
    
    print_success "Grid view created successfully"
    
    # Add grid view to processed files
    PROCESSED_FILES+=("$TMP_DIR/grid_view.mp4")
    
    # Create file list for ffmpeg concat
    print_status "Concatenating all segments..."
    local FILELIST="$TMP_DIR/filelist.txt"
    for processed_file in "${PROCESSED_FILES[@]}"; do
        echo "file '$processed_file'" >> "$FILELIST"
    done
    
    # Concatenate all processed videos
    ffmpeg $ffmpeg_output -f concat -safe 0 -i "$FILELIST" \
        -c copy \
        -movflags +faststart \
        "$TMP_DIR/concatenated_temp.mp4"
    
    # Check file size and adjust compression if needed
    local file_size max_size_bytes
    file_size=$(stat -f%z "$TMP_DIR/concatenated_temp.mp4" 2>/dev/null || stat -c%s "$TMP_DIR/concatenated_temp.mp4" 2>/dev/null)
    max_size_bytes=$((max_size * 1024 * 1024))
    
    print_status "Initial file size: $((file_size / 1024 / 1024))MB"
    
    if [ "$file_size" -gt "$max_size_bytes" ]; then
        print_warning "File too large, applying compression..."
        
        # More aggressive compression
        ffmpeg $ffmpeg_output -i "$TMP_DIR/concatenated_temp.mp4" \
            -vf "scale=iw*0.8:ih*0.8" \
            -c:v libx264 \
            -preset slow \
            -crf 32 \
            -movflags +faststart \
            "$TMP_DIR/concatenated_compressed.mp4"
        
        file_size=$(stat -f%z "$TMP_DIR/concatenated_compressed.mp4" 2>/dev/null || stat -c%s "$TMP_DIR/concatenated_compressed.mp4" 2>/dev/null)
        print_status "Compressed file size: $((file_size / 1024 / 1024))MB"
        
        if [ "$file_size" -gt "$max_size_bytes" ]; then
            print_warning "Still too large, applying maximum compression..."
            
            ffmpeg $ffmpeg_output -i "$TMP_DIR/concatenated_temp.mp4" \
                -vf "scale=iw*0.6:ih*0.6" \
                -c:v libx264 \
                -preset veryslow \
                -crf 35 \
                -movflags +faststart \
                "$TMP_DIR/final_output.mp4"
            
            cp "$TMP_DIR/final_output.mp4" "$output_file"
        else
            cp "$TMP_DIR/concatenated_compressed.mp4" "$output_file"
        fi
    else
        cp "$TMP_DIR/concatenated_temp.mp4" "$output_file"
    fi
    
    # Final file size check
    local final_size
    final_size=$(stat -f%z "$output_file" 2>/dev/null || stat -c%s "$output_file" 2>/dev/null)
    
    print_success "Video concatenation complete! Output saved as '$output_file'"
    echo ""
    print_status "Final video includes:"
    echo "  • 5-second intro slide with scene list"
    echo "  • All video content with filename watermarks"
    echo "  • Grid view finale showing all scenes simultaneously"
    echo ""
    print_status "Final file size: $((final_size / 1024 / 1024))MB"
    
    if [ "$final_size" -le "$max_size_bytes" ]; then
        print_success "✅ File size is under ${max_size}MB target"
    else
        print_warning "⚠️  File size exceeds ${max_size}MB target"
    fi
}

# Main function
main() {
    # Parse command line arguments
    parse_args "$@"
    
    # Check dependencies
    check_dependencies
    
    # Validate input directory
    validate_input_dir "$INPUT_DIR"
    
    # Convert relative paths to absolute
    INPUT_DIR=$(cd "$INPUT_DIR" && pwd)
    
    # Run the concatenation
    concatenate_videos "$INPUT_DIR" "$OUTPUT_FILE" "$MAX_SIZE_MB"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 